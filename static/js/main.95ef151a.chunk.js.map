{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","id","name","email","className","alt","src","CardList","robots","map","index","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","render","searchField","onSearchChange","isPending","filterRobots","filter","robot","toLowerCase","includes","onRequestRobots","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"iRAsBeA,EApBF,SAACC,GAAU,IAGZC,EAAoBD,EAApBC,GAAIC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MAClB,OACI,yBAAKC,UAAU,oDACX,yBAAKC,IAAI,gBAAgBC,IAAG,+BAA0BL,EAA1B,mBAC5B,6BACI,4BACKC,GAEL,2BACKC,MCWNI,EAtBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAIhB,OACI,6BAEQA,EAAOC,KAAI,SAACP,EAAMQ,GACd,OAAQ,kBAAC,EAAD,CACJC,IAAKD,EACLT,GAAIO,EAAOE,GAAOT,GAClBC,KAAMM,EAAOE,GAAOR,KACpBC,MAAOK,EAAOE,GAAOP,aCA9BS,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKV,UAAU,OACX,2BACIA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCKXI,EAZA,SAAClB,GACZ,OACI,yBAAKmB,MAAO,CACRC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,UAEPtB,EAAMuB,WCaJC,E,kDAnBX,WAAYxB,GAAQ,IAAD,8BACf,cAAMA,IACDyB,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACJ,yDAEJG,KAAK7B,MAAMuB,a,GAhBEQ,aCuBtBC,E,4MAYFC,OAAS,WAAM,MAEgD,EAAKjC,MAAxDkC,EAFG,EAEHA,YAAaC,EAFV,EAEUA,eAAgB3B,EAF1B,EAE0BA,OAAQ4B,EAFlC,EAEkCA,UACvCC,EAAe7B,EAAO8B,QAAO,SAAAC,GAC/B,OAAOA,EAAMrC,KAAKsC,cAAcC,SAASP,EAAYM,kBAEzD,OAAOJ,EACH,0CAEA,yBAAKhC,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAcqB,IACzB,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU3B,OAAQ6B,Q,kEAjBlCR,KAAK7B,MAAM0C,sB,GATDX,aAoCHY,eApDS,SAAAlB,GACpB,MAAO,CACHS,YAAaT,EAAMmB,aAAaV,YAChC1B,OAAQiB,EAAMoB,cAAcrC,OAC5B4B,UAAWX,EAAMoB,cAAcT,UAC/BT,MAAOF,EAAMoB,cAAclB,UAIR,SAACmB,GACxB,MAAO,CACHX,eAAgB,SAACY,GAAD,OAAWD,ECXxB,CACH/B,KCV2B,sBDW3BiC,QDSmDD,EAAME,OAAOC,SAChER,gBAAiB,kBAAMI,GCNI,SAACA,GAChCA,EAAS,CAAE/B,KCduB,2BDelCoC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIT,EAAS,CAAE/B,KChBK,yBDgByBiC,QAASO,OAC/DC,OAAM,SAAA7B,GAAK,OAAImB,EAAS,CAAE/B,KChBE,wBDgB2BiC,QAASrB,cDyC1DgB,CAA6CX,GGjDxCyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,UCXAC,EAAqB,CACvB5B,YAAa,IAaX6B,EAAqB,CACvB3B,WAAW,EACX5B,OAAQ,GACRmB,MAAO,ICZLqC,EAASC,yBAETC,EAAcC,YAAgB,CAACvB,aDFT,WAA8C,IAA7CnB,EAA4C,uDAApCqC,EAAoBM,EAAgB,uDAAP,GAC9D,OAAQA,EAAOrD,MACX,IFd2B,sBEevB,OAAOsD,OAAOC,OAAO,GAAI7C,EAAO,CAAES,YAAakC,EAAOpB,UAC1D,QACI,OAAOvB,ICHgCoB,cDctB,WAA8C,IAA7CpB,EAA4C,uDAApCsC,EAAoBK,EAAgB,uDAAP,GAC/D,OAAQA,EAAOrD,MACX,IF5B8B,yBE6B1B,OAAOsD,OAAOC,OAAO,GAAI7C,EAAO,CAAEW,WAAW,IACjD,IF7B8B,yBE8B1B,OAAOiC,OAAOC,OAAO,GAAI7C,EAAO,CAAEjB,OAAQ4D,EAAOpB,QAASZ,WAAW,IACzE,IF9B6B,wBE+BzB,OAAOiC,OAAOC,OAAO,GAAI7C,EAAO,CAAEE,MAAOyC,EAAOpB,QAASZ,WAAW,IACxE,QACI,OAAOX,MCtBb8C,EAAQC,YAAYN,EAAaO,YAAgBC,IAAiBV,IAExEW,IAAS1C,OACP,kBAAC,IAAD,CAAUsC,MAAOA,GACf,kBAAC,EAAD,OAEFK,SAASC,eAAe,SF8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEd1B,OAAM,SAAA7B,GACLwD,QAAQxD,MAAMA,EAAMyD,c","file":"static/js/main.95ef151a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n\n    // Destructuring\n    const { id, name, email } = props;\n    return (\n        <div className=\"bg-light-green dib grow ma2 br3 pad3 shadow-5 tc\">\n            <img alt='avatar-robots' src={`https://robohash.org/${id}?size=200x200`} />\n            <div>\n                <h2>\n                    {name}\n                </h2>\n                <p>\n                    {email}\n                </p>\n            </div>\n        </div>\n\n    );\n}\n\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ robots }) => {\r\n    // if (true) {\r\n    //     throw new Error('Noooooooo!');\r\n    // }\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((name, index) => {\r\n                    return (<Card\r\n                        key={index}\r\n                        id={robots[index].id}\r\n                        name={robots[index].name}\r\n                        email={robots[index].email}\r\n\r\n                    />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input\r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type='search'\r\n                placeholder='search robots'\r\n                onChange={searchChange} />\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{\r\n            overflowY: 'scroll',\r\n            border: '5px solid black',\r\n            height: '800px'\r\n        }}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Ooooops. That is not good</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n// import { render } from '@testing-library/react';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    // constructor() {\r\n    //     super();\r\n    //     this.state = {\r\n    //         robots: []\r\n    //     }\r\n    // }\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render = () => {\r\n        // const { robots } = this.state; // Destructuring\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filterRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        return isPending ?\r\n            <h1>Loading...</h1> :\r\n\r\n            <div className=\"tc\">\r\n                <h1 className=\"f1\">RoboFriends</h1>\r\n                <SearchBox searchChange={onSearchChange} />\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList robots={filterRobots} />\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nexport const setSearchField = (text) => {\r\n    // console.log(text);\r\n    return {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    }\r\n}\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\"\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\"\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\"","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload })\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}